// Code generated by MockGen. DO NOT EDIT.
// Source: updater/interfaces.go

// Package manager is a generated GoMock package.
package manager

import (
	x "kubernetes-update-manager/updater"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/batch/v1"
	v11 "k8s.io/client-go/kubernetes/typed/apps/v1"
	v12 "k8s.io/client-go/kubernetes/typed/batch/v1"
	reflect "reflect"
	time "time"
)

// MockMatchConfig is a mock of MatchConfig interface
type MockMatchConfig struct {
	ctrl     *gomock.Controller
	recorder *MockMatchConfigMockRecorder
}

// MockMatchConfigMockRecorder is the mock recorder for MockMatchConfig
type MockMatchConfigMockRecorder struct {
	mock *MockMatchConfig
}

// NewMockMatchConfig creates a new mock instance
func NewMockMatchConfig(ctrl *gomock.Controller) *MockMatchConfig {
	mock := &MockMatchConfig{ctrl: ctrl}
	mock.recorder = &MockMatchConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchConfig) EXPECT() *MockMatchConfigMockRecorder {
	return m.recorder
}

// GetImage mocks base method
func (m *MockMatchConfig) GetImage() *x.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage")
	ret0, _ := ret[0].(*x.Image)
	return ret0
}

// GetImage indicates an expected call of GetImage
func (mr *MockMatchConfigMockRecorder) GetImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockMatchConfig)(nil).GetImage))
}

// GetUpdateClassifier mocks base method
func (m *MockMatchConfig) GetUpdateClassifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateClassifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUpdateClassifier indicates an expected call of GetUpdateClassifier
func (mr *MockMatchConfigMockRecorder) GetUpdateClassifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateClassifier", reflect.TypeOf((*MockMatchConfig)(nil).GetUpdateClassifier))
}

// MockUpdatePlan is a mock of UpdatePlan interface
type MockUpdatePlan struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatePlanMockRecorder
}

// MockUpdatePlanMockRecorder is the mock recorder for MockUpdatePlan
type MockUpdatePlanMockRecorder struct {
	mock *MockUpdatePlan
}

// NewMockUpdatePlan creates a new mock instance
func NewMockUpdatePlan(ctrl *gomock.Controller) *MockUpdatePlan {
	mock := &MockUpdatePlan{ctrl: ctrl}
	mock.recorder = &MockUpdatePlanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdatePlan) EXPECT() *MockUpdatePlanMockRecorder {
	return m.recorder
}

// GetToCreateJobs mocks base method
func (m *MockUpdatePlan) GetToCreateJobs() []v10.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToCreateJobs")
	ret0, _ := ret[0].([]v10.Job)
	return ret0
}

// GetToCreateJobs indicates an expected call of GetToCreateJobs
func (mr *MockUpdatePlanMockRecorder) GetToCreateJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToCreateJobs", reflect.TypeOf((*MockUpdatePlan)(nil).GetToCreateJobs))
}

// GetToApplyDeployments mocks base method
func (m *MockUpdatePlan) GetToApplyDeployments() []v1.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToApplyDeployments")
	ret0, _ := ret[0].([]v1.Deployment)
	return ret0
}

// GetToApplyDeployments indicates an expected call of GetToApplyDeployments
func (mr *MockUpdatePlanMockRecorder) GetToApplyDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToApplyDeployments", reflect.TypeOf((*MockUpdatePlan)(nil).GetToApplyDeployments))
}

// MockKubernetesWrapper is a mock of KubernetesWrapper interface
type MockKubernetesWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesWrapperMockRecorder
}

// MockKubernetesWrapperMockRecorder is the mock recorder for MockKubernetesWrapper
type MockKubernetesWrapperMockRecorder struct {
	mock *MockKubernetesWrapper
}

// NewMockKubernetesWrapper creates a new mock instance
func NewMockKubernetesWrapper(ctrl *gomock.Controller) *MockKubernetesWrapper {
	mock := &MockKubernetesWrapper{ctrl: ctrl}
	mock.recorder = &MockKubernetesWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesWrapper) EXPECT() *MockKubernetesWrapperMockRecorder {
	return m.recorder
}

// GetJobAPIFor mocks base method
func (m *MockKubernetesWrapper) GetJobAPIFor(namespace string) v12.JobInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobAPIFor", namespace)
	ret0, _ := ret[0].(v12.JobInterface)
	return ret0
}

// GetJobAPIFor indicates an expected call of GetJobAPIFor
func (mr *MockKubernetesWrapperMockRecorder) GetJobAPIFor(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobAPIFor", reflect.TypeOf((*MockKubernetesWrapper)(nil).GetJobAPIFor), namespace)
}

// GetDeploymentAPIFor mocks base method
func (m *MockKubernetesWrapper) GetDeploymentAPIFor(namespace string) v11.DeploymentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentAPIFor", namespace)
	ret0, _ := ret[0].(v11.DeploymentInterface)
	return ret0
}

// GetDeploymentAPIFor indicates an expected call of GetDeploymentAPIFor
func (mr *MockKubernetesWrapperMockRecorder) GetDeploymentAPIFor(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentAPIFor", reflect.TypeOf((*MockKubernetesWrapper)(nil).GetDeploymentAPIFor), namespace)
}

// GetReplicaSetAPIFor mocks base method
func (m *MockKubernetesWrapper) GetReplicaSetAPIFor(namespace string) v11.ReplicaSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaSetAPIFor", namespace)
	ret0, _ := ret[0].(v11.ReplicaSetInterface)
	return ret0
}

// GetReplicaSetAPIFor indicates an expected call of GetReplicaSetAPIFor
func (mr *MockKubernetesWrapperMockRecorder) GetReplicaSetAPIFor(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaSetAPIFor", reflect.TypeOf((*MockKubernetesWrapper)(nil).GetReplicaSetAPIFor), namespace)
}

// MockUpdateProgress is a mock of UpdateProgress interface
type MockUpdateProgress struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateProgressMockRecorder
}

// MockUpdateProgressMockRecorder is the mock recorder for MockUpdateProgress
type MockUpdateProgressMockRecorder struct {
	mock *MockUpdateProgress
}

// NewMockUpdateProgress creates a new mock instance
func NewMockUpdateProgress(ctrl *gomock.Controller) *MockUpdateProgress {
	mock := &MockUpdateProgress{ctrl: ctrl}
	mock.recorder = &MockUpdateProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateProgress) EXPECT() *MockUpdateProgressMockRecorder {
	return m.recorder
}

// GetJobs mocks base method
func (m *MockUpdateProgress) GetJobs() []*v10.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs")
	ret0, _ := ret[0].([]*v10.Job)
	return ret0
}

// GetJobs indicates an expected call of GetJobs
func (mr *MockUpdateProgressMockRecorder) GetJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockUpdateProgress)(nil).GetJobs))
}

// GetDeployments mocks base method
func (m *MockUpdateProgress) GetDeployments() []*v1.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployments")
	ret0, _ := ret[0].([]*v1.Deployment)
	return ret0
}

// GetDeployments indicates an expected call of GetDeployments
func (mr *MockUpdateProgressMockRecorder) GetDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockUpdateProgress)(nil).GetDeployments))
}

// FinishedJobsCount mocks base method
func (m *MockUpdateProgress) FinishedJobsCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishedJobsCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// FinishedJobsCount indicates an expected call of FinishedJobsCount
func (mr *MockUpdateProgressMockRecorder) FinishedJobsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishedJobsCount", reflect.TypeOf((*MockUpdateProgress)(nil).FinishedJobsCount))
}

// UpdatedDeploymentsCount mocks base method
func (m *MockUpdateProgress) UpdatedDeploymentsCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedDeploymentsCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// UpdatedDeploymentsCount indicates an expected call of UpdatedDeploymentsCount
func (mr *MockUpdateProgressMockRecorder) UpdatedDeploymentsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedDeploymentsCount", reflect.TypeOf((*MockUpdateProgress)(nil).UpdatedDeploymentsCount))
}

// FinishTime mocks base method
func (m *MockUpdateProgress) FinishTime() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTime")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// FinishTime indicates an expected call of FinishTime
func (mr *MockUpdateProgressMockRecorder) FinishTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTime", reflect.TypeOf((*MockUpdateProgress)(nil).FinishTime))
}

// Finished mocks base method
func (m *MockUpdateProgress) Finished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Finished indicates an expected call of Finished
func (mr *MockUpdateProgressMockRecorder) Finished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockUpdateProgress)(nil).Finished))
}

// Failed mocks base method
func (m *MockUpdateProgress) Failed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Failed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Failed indicates an expected call of Failed
func (mr *MockUpdateProgressMockRecorder) Failed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockUpdateProgress)(nil).Failed))
}

// Successful mocks base method
func (m *MockUpdateProgress) Successful() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Successful")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Successful indicates an expected call of Successful
func (mr *MockUpdateProgressMockRecorder) Successful() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Successful", reflect.TypeOf((*MockUpdateProgress)(nil).Successful))
}

// Abort mocks base method
func (m *MockUpdateProgress) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort
func (mr *MockUpdateProgressMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockUpdateProgress)(nil).Abort))
}
