// Code generated by MockGen. DO NOT EDIT.
// Source: updater/matcher.go

// Package mock_updater is a generated GoMock package.
package updater

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMatchConfig is a mock of MatchConfig interface
type MockMatchConfig struct {
	ctrl     *gomock.Controller
	recorder *MockMatchConfigMockRecorder
}

// MockMatchConfigMockRecorder is the mock recorder for MockMatchConfig
type MockMatchConfigMockRecorder struct {
	mock *MockMatchConfig
}

// NewMockMatchConfig creates a new mock instance
func NewMockMatchConfig(ctrl *gomock.Controller) *MockMatchConfig {
	mock := &MockMatchConfig{ctrl: ctrl}
	mock.recorder = &MockMatchConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchConfig) EXPECT() *MockMatchConfigMockRecorder {
	return m.recorder
}

// GetImage mocks base method
func (m *MockMatchConfig) GetImage() *Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage")
	ret0, _ := ret[0].(*Image)
	return ret0
}

// GetImage indicates an expected call of GetImage
func (mr *MockMatchConfigMockRecorder) GetImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockMatchConfig)(nil).GetImage))
}

// GetUpdateClassifier mocks base method
func (m *MockMatchConfig) GetUpdateClassifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateClassifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUpdateClassifier indicates an expected call of GetUpdateClassifier
func (mr *MockMatchConfigMockRecorder) GetUpdateClassifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateClassifier", reflect.TypeOf((*MockMatchConfig)(nil).GetUpdateClassifier))
}
